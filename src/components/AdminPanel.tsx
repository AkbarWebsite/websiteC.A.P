import React, { useState } from 'react';
import { Upload, FileText, Save, Eye, EyeOff } from 'lucide-react';
import * as XLSX from 'xlsx';

interface PartData {
  code: string;
  name: string;
  brand: string;
  price: string;
  weight: string;
  category: string;
  description?: string;
  availability: string;
}

interface AdminPanelProps {
  onCatalogUpdate: (data: PartData[]) => void;
  currentCatalogSize: number;
}

export const AdminPanel: React.FC<AdminPanelProps> = ({ onCatalogUpdate, currentCatalogSize }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [previewData, setPreviewData] = useState<PartData[]>([]);
  const [adminPassword, setAdminPassword] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é)
  const ADMIN_PASSWORD = 'cap2025';

  const handleLogin = () => {
    if (adminPassword === ADMIN_PASSWORD) {
      setIsAuthenticated(true);
    } else {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      processExcelFile(file);
    }
  };

  const processExcelFile = (file: File) => {
    setIsProcessing(true);
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        const processedData: PartData[] = [];
        
        // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
        const headerRow = jsonData[0] as string[];
        const partNoIndex = headerRow.findIndex(header => 
          header && header.toString().toLowerCase().includes('part')
        );
        const descriptionIndex = headerRow.findIndex(header => 
          header && (header.toString().toLowerCase().includes('description') || 
                    header.toString().toLowerCase().includes('discrapion'))
        );
        const priceIndex = headerRow.findIndex(header => 
          header && header.toString().toLowerCase().includes('nett')
        );

        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
        for (let i = 1; i < jsonData.length; i++) {
          const row = jsonData[i] as any[];
          
          if (row && row.length > 0) {
            const partNo = row[partNoIndex]?.toString().trim() || '';
            const description = row[descriptionIndex]?.toString().trim() || '';
            const price = row[priceIndex]?.toString().trim() || '';

            if (partNo) {
              processedData.push({
                code: partNo,
                name: description,
                brand: 'C.A.P',
                price: price,
                weight: '',
                category: '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏',
                description: description,
                availability: '–í –Ω–∞–ª–∏—á–∏–∏'
              });
            }
          }
        }

        setPreviewData(processedData);
        setIsProcessing(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ Excel');
        setIsProcessing(false);
      }
    };

    reader.readAsArrayBuffer(file);
  };

  const saveCatalog = () => {
    if (previewData.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage –¥–ª—è –¥–µ–º–æ
      localStorage.setItem('capCatalog', JSON.stringify(previewData));
      onCatalogUpdate(previewData);
      alert(`–ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${previewData.length} –ø–æ–∑–∏—Ü–∏–π.`);
      setSelectedFile(null);
      setPreviewData([]);
    }
  };

  if (!isVisible) {
    return (
      <button
        onClick={() => setIsVisible(true)}
        className="fixed top-4 left-4 bg-red-600 hover:bg-red-700 text-white p-2 rounded-full shadow-lg z-50"
        title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
      >
        <Eye className="w-5 h-5" />
      </button>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 rounded-2xl p-8 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-white">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º</h2>
          <button
            onClick={() => setIsVisible(false)}
            className="text-gray-400 hover:text-white"
          >
            <EyeOff className="w-6 h-6" />
          </button>
        </div>

        {!isAuthenticated ? (
          <div className="text-center">
            <h3 className="text-xl text-white mb-4">–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h3>
            <div className="max-w-sm mx-auto">
              <input
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                value={adminPassword}
                onChange={(e) => setAdminPassword(e.target.value)}
                className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white mb-4"
                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
              />
              <button
                onClick={handleLogin}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg"
              >
                –í–æ–π—Ç–∏
              </button>
            </div>
          </div>
        ) : (
          <>
            <div className="mb-6">
              <p className="text-gray-300 mb-4">
                –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥: <span className="text-green-400 font-bold">{currentCatalogSize} –ø–æ–∑–∏—Ü–∏–π</span>
              </p>
              
              <div className="border-2 border-dashed border-gray-600 rounded-lg p-6 text-center">
                <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-white mb-2">
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ Excel
                </h3>
                <p className="text-gray-400 mb-4">
                  –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: PART NO, DESCRIPTION, NETT
                </p>
                <input
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={handleFileUpload}
                  className="hidden"
                  id="admin-file-upload"
                />
                <label
                  htmlFor="admin-file-upload"
                  className="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer"
                >
                  <FileText className="w-5 h-5 mr-2" />
                  –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª Excel
                </label>
              </div>
            </div>

            {selectedFile && (
              <div className="mb-6 p-4 bg-gray-800 rounded-lg">
                <p className="text-green-400 mb-2">
                  ‚úÖ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω: {selectedFile.name}
                </p>
                {isProcessing && (
                  <p className="text-yellow-400">üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...</p>
                )}
              </div>
            )}

            {previewData.length > 0 && (
              <div className="mb-6">
                <h3 className="text-xl font-bold text-white mb-4">
                  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ({previewData.length} –ø–æ–∑–∏—Ü–∏–π)
                </h3>
                <div className="bg-gray-800 rounded-lg p-4 max-h-60 overflow-y-auto">
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div className="font-bold text-gray-300">–ö–æ–¥</div>
                    <div className="font-bold text-gray-300">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
                    <div className="font-bold text-gray-300">–¶–µ–Ω–∞</div>
                    
                    {previewData.slice(0, 10).map((item, index) => (
                      <React.Fragment key={index}>
                        <div className="text-blue-400">{item.code}</div>
                        <div className="text-white">{item.name}</div>
                        <div className="text-green-400">{item.price}</div>
                      </React.Fragment>
                    ))}
                  </div>
                  {previewData.length > 10 && (
                    <p className="text-gray-400 mt-4 text-center">
                      ... –∏ –µ—â–µ {previewData.length - 10} –ø–æ–∑–∏—Ü–∏–π
                    </p>
                  )}
                </div>
                
                <button
                  onClick={saveCatalog}
                  className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white p-3 rounded-lg flex items-center justify-center"
                >
                  <Save className="w-5 h-5 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ ({previewData.length} –ø–æ–∑–∏—Ü–∏–π)
                </button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};